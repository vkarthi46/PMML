# Working Directory
setwd("C:\\Users\\vkarth2\\Desktop\\Competitions\\AV\\Practice Problem-1\\Dressify")
# Required Packages
# install.packages("pacman")
pacman::p_load(caTools,rpart,arm,RCurl,pmmlTransformations,pmml,XML) 

# Reading The Data
data=read.csv("C:\\Users\\vkarth2\\Desktop\\Competitions\\AV\\Practice Problem-1\\Dressify\\Train.csv")
data$Rating=as.factor(data$Rating)

# Spilit Train and Test Data
require(caTools)
set.seed(101) 
sample = sample.split(data[,1], SplitRatio = .75)
train = subset(data, sample == TRUE)
test1= subset(data, sample == FALSE)
test=test1[,-(length(test1))]

train$Rating=as.factor(train$Rating)
test$Rating=as.factor(test$Rating)

# Build Models
model<-rpart(Recommended~.,data=train)

## export as pmml
export_xml=saveXML(pmml(model, model.name = "Binary Logistic Regression", app.name = "RR/PMML", dataset = data), file ="Binary Logistic Regression.xml") 

# Prediction
predictPMMLModel=function(dataset,transformTargetAttribute,modelURL,applServerURL)
{
  require(XML)
  require(RCurl)
  header <- paste(colnames(dataset), collapse=",") # extract header
  # transformation to characters is necessary to avoid some “bad surprise” 
  # from R's handling of factor attributes
  datasetTransf <- data.frame(lapply(dataset, as.character), stringsAsFactors=FALSE)
  dataString <- paste(header,"|", paste(do.call("rbind",by(datasetTransf, 1:nrow(datasetTransf), function(row){paste(row, collapse=",")
  }, simplify = FALSE)), collapse ="|"), "|", sep = "")
  # create xml document
  xmlHeader <- xmlPINode(sys = 'xml', value = 'version="1.0" encoding="UTF-8"')
  xmlRequest <- xmlNode("scoring_request", 
                        xmlNode("pmml_url", modelURL), 
                        xmlNode("model_name"),
                        xmlNode("csv_input_rows",xmlCDataNode(dataString)))
  # xml request as string
  fullXMLRequest <- paste(toString(xmlHeader),"\n", gsub(" ", "", toString(xmlRequest, sep=""), fixed = TRUE))
  # http post request
  r = dynCurlReader()
  curlPerform(postfields = fullXMLRequest, url = applServerURL, verbose = TRUE, post = 1L, writefunction = r$update)
  r$value()
  # parse results - !!caution: currently no error checking!!
  tmp <- xmlTreeParse(r$value())
  predictionString <- xmlValue(tmp[[1]][[1]][[4]])
  # extract predictions line by line
  predictionLines <- strsplit(predictionString, split ="|", fixed = TRUE)[[1]][-1]
  predictions <- transformTargetAttribute(sapply(predictionLines, function(s){gsub('\"','',
                                                                                   tail(strsplit(s, ',', fixed = TRUE)[[1]], n=1))}))
  names(predictions)=NULL
  return(predictions)
}
# prediction
prediction_MLR=predictPMMLModel(dataset = test,transformTargetAttribute = factor, modelURL = paste("file://", export_xml, sep = ""), 
                                applServerURL = "http://10.0.2.2:8080/OpenScoring/Scoring")


# scoring(obtaining predicted probability)
scores<-predict(model,test)
scored<-cbind(test1,scores)

#sensitivity and specificity for varying cut values
#creating space for storing sensitivity and specificity
cutpoints<-seq(0,1,0.01)
length(cutpoints)
sensitivity<-seq(1,101,1)	
specificity<-seq(1,101,1)
cutpoint_performance<-cbind(cutpoints,sensitivity,specificity)
table(scored$Recommended)

for(i in 1:101)
{
  scored$predicted<-ifelse(scored$scores<cutpoint_performance[i,1],0,1)
  scored$sumed<-scored$predicted+scored$Recommended
  scored$pred_1<-ifelse(scored$sumed==2,1,0)
  correct_1<-sum(scored$pred_1)
  scored$pred_0<-ifelse(scored$sumed==0,1,0)
  correct_0<-sum(scored$pred_0)
  cutpoint_performance[i,2]<-correct_1/28
  cutpoint_performance[i,3]<-correct_0/50
}
Cutvalue_table<-table(scored$Recommended,scored$predicted)
Cutvalue_table
cutvalue_table<-data.frame(cutpoint_performance)
cutvalue_table$diff<-abs(cutvalue_table$sensitivity-cutvalue_table$specificity)

# tabulation for creating gains chart
sorted<-scored[order(-scored$scores),]
sorted$row_id<-seq(1,nrow(sorted),1)
sorted$grp<-trunc((sorted$row_id/nrow(sorted))*10)+1
sorted$group<-ifelse(sorted$grp==11,10,sorted$grp)
gains_chart<-table(sorted$group,sorted$Coupen)
cum_events<-cumsum(gains_chart[,2])
gains_chart<-cbind(gains_chart,cum_events)
cum_prob_events<-cum_events/11
gain_chart<-cbind(gains_chart,cum_prob_events)

